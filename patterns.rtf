{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red77\green0\blue105;\red3\green45\blue153;\red0\green0\blue0;
\red168\green24\blue75;\red34\green0\blue47;\red7\green60\blue82;\red221\green32\blue103;\red230\green87\blue141;
\red63\green105\blue30;}
{\*\expandedcolortbl;;\cssrgb\c37964\c9215\c48780;\cssrgb\c0\c25950\c66514;\cssrgb\c0\c0\c0;
\cssrgb\c72439\c17643\c36556;\cssrgb\c18044\c2673\c24205;\cssrgb\c0\c30219\c39596;\cssrgb\c90234\c23206\c47866;\cssrgb\c93000\c44193\c62103;
\cssrgb\c30831\c47797\c15540;}
\margl1440\margr1440\vieww13820\viewh12580\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs72 \cf2 Algo Patterns!\

\fs28 \

\fs36 \cf3 1. Sliding Window\

\f1\b0\fs28 \cf4 Used when operating on a specific window size 
\f0\b (RADAR!: \'93subset\'94, \'93subarray\'94)
\f1\b0  in an array \
Reduces O(n^2) to O(n)\
Start from first element, keep shifting right one element. Adjust window length based on problem \
\cf5 - https://medium.com/outco/how-to-solve-sliding-window-problems-28d67601a66\
- https://www.youtube.com/watch?v=qqXOZD4zKEg\
- https://www.baeldung.com/cs/sliding-window-algorithm\cf6 \
\cf4  
\f0\b \cf7 When to use:
\f1\b0  \cf4 \
	-input is linear (string, array, linked list) \
	-asked to find longest/shortest substring or desired value\

\f0\b \cf7 Common problems:
\f1\b0 \cf4 \
	-Max sum subarray of size K (easy)\
	-Longest subarray with K distinct characters (medium)\
	-String anagrams (hard)\

\f0\b\fs36 \cf3 \
2. Two pointers\

\f1\b0\fs28 \cf4 Increment/decrement 2 pointers through a sorted data structure to find a set of elements that meet\
Reduces O(n^2) to O(n)\
Useful for comparing each element to other elements\
\cf8 https://www.youtube.com/watch?v=OO6vFDpZItQ&list=PL7jWnjXRHp2F3LsOe4_ZwA1zrkSeU7WZF&index=1\cf9  \cf4 \

\f0\b \cf7 When to use:
\f1\b0 \cf4 \
	-linear, sorted data structure (string, array, linked list)\
	-set of elements is a pair, triplet, subarray\

\f0\b \cf7 Common problems:
\f1\b0 \cf4 \
	-Squaring a sorted array (easy)\
	-Triplets that sum to zero (medium)\
	-Comparing strings that contain backspaces (medium)
\f0\b\fs36 \cf3 \
\
3. Hare and Tortoise\

\f1\b0\fs28 \cf4 \'85
\f0\b\fs36 \cf3 \
4. Merge Intervals\

\f1\b0\fs28 \cf4 \'85
\f0\b\fs36 \cf3 \
5. Cyclic Sort\

\f1\b0\fs28 \cf4 \'85
\f0\b\fs36 \cf3 \
6. In-Place Reversal (of Linked List)\

\f1\b0\fs28 \cf4 \'85
\f0\b\fs36 \cf3 \
7. Tree search\

\fs28 \cf10 A. Breadth First Search
\fs32 \cf3 \

\f1\b0\fs28 \cf4 \'85
\f0\b\fs32 \cf3 \

\fs28 \cf10 B. Depth First Search
\fs32 \cf3 \

\f1\b0\fs28 \cf4 \'85
\f0\b\fs36 \cf3 \
8. Two Heaps\

\f1\b0\fs28 \cf4 \'85
\f0\b\fs36 \cf3 \
9. Subsets\

\f1\b0\fs28 \cf4 \'85
\f0\b\fs36 \cf3 \
10. Modified Binary Search\

\f1\b0\fs28 \cf4 \'85\

\f0\b\fs36 \cf3 11. Top K Elements\

\f1\b0\fs28 \cf4 \'85
\f0\b\fs36 \cf3 \
12. K-Way Merge\

\f1\b0\fs28 \cf4 \'85
\f0\b\fs36 \cf3 \
13. Topological Sort\

\f1\b0\fs28 \cf4 \'85}